name: Deploy frontend app V2 (green only)

on:
  workflow_call:
    inputs:
      NODE_VERSION:
        description: 'The version of node to use for yarn build'
        default: '16.0.0'
        type: string
        required: false
      AWS_REGION:
        description: 'The AWS region where you will deploy resources'
        default: 'us-east-2'
        type: string
        required: false
      ENV:
        description: 'Environment name for deployment'
        default: 'dev'
        type: string
        required: true
      APP:
        description: 'Application name'
        default: 'cents-fe'
        type: string
        required: true
      SUBDOMAIN:
        description: 'Subdomain name for the application'
        default: 'admin'
        type: string
        required: true
      AWS_ACCOUNT_ID:
        description: 'AWS account ID'
        default: '476590511219'
        type: string
        required: true
      APP_DNS_DOMAIN:
        description: 'Root DNS domain for application'
        default: 'trycents.dev'
        type: string
        required: true

concurrency:
  group: ${{ github.ref }}-group
  cancel-in-progress: false

env:
  IAM_ROLE_NAME: ${{ inputs.ENV }}-ci-role
  ENV: ${{ inputs.ENV }}
  APP: ${{ inputs.APP }}
  SUBDOMAIN: ${{ inputs.SUBDOMAIN }}
  AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID }}
  APP_DNS_DOMAIN: ${{ inputs.APP_DNS_DOMAIN }}
  AWS_REGION: ${{ inputs.AWS_REGION }}
  PART: green

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    steps:

      - name: Git clone the repository
        uses: actions/checkout@v2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.IAM_ROLE_NAME }}
          mask-aws-account-id: true
          aws-region: ${{ env.AWS_REGION }}

      - name: Build .env file from input values
        run: |
          export secret_id="$ENV/$APP/env-$PART"
          # Get secret contents
          secret_string=$(aws secretsmanager get-secret-value --secret-id "$secret_id" \
            --query SecretString --output text)
          # Get keys from secret contents
          secret_keys=$(echo $secret_string | jq -r '. | keys[]')
          # Cleanup or create the .env file
          echo "" > .env
          # Fill up the .env file with data
          for key in $secret_keys
          do
              echo "$key=$(echo $secret_string | jq .$key)" >> .env
          done

      - name: Install deps and build artifacts
        uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.NODE_VERSION }}
          cache: 'yarn'
      - run: |
          yarn install --frozen-lockfile
          CI="" yarn build
          ls -a

      - name: Sync build files to S3 bucket
        run: |
          export BUCKET_PREFFIX="$APP-$ENV-$PART"
          export BUCKET_QUERY=".Buckets[] | select( .Name | startswith(\"$BUCKET_PREFFIX\")).Name"
          BUCKET_NAME=$(aws s3api list-buckets | jq -r -c "$BUCKET_QUERY")
          aws s3 sync build s3://$BUCKET_NAME \
             --acl public-read --delete

      - name: Create new CloudFront Invalidation
        run: |
          CloudFrontARN=$(aws resourcegroupstaggingapi get-resources \
            --tag-filters Key=san,Values=$SUBDOMAIN-$PART.$APP_DNS_DOMAIN \
            --resource-type-filters 'cloudfront' \
            --tags-per-page 100 \
            --region us-east-1 | jq -r '.ResourceTagMappingList[].ResourceARN')
          CloudFrontID=$(echo $CloudFrontARN | awk -F "/" '{print $NF}')
          echo "Invalidate cache for the CloudFront instance with ID $CloudFrontID"
          aws cloudfront create-invalidation --distribution-id $CloudFrontID \
              --paths "/*"
